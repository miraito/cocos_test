{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","spawnNewStar","gainScore","destroy","start","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,CAFJ;AAGR;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAJE,KAHP;;AAcLC,uBAAmB,6BAAY;AAC3B;AACA,YAAIC,YAAY,KAAKJ,IAAL,CAAUK,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAOb,GAAGc,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCN,SAAjC,CAAX;AACA,eAAOG,IAAP;AACH,KApBI;;AAsBLI,cAAU,oBAAW;AACjB;AACA,aAAKX,IAAL,CAAUY,YAAV;AACA;AACA,aAAKZ,IAAL,CAAUa,SAAV;AACA;AACA,aAAKJ,IAAL,CAAUK,OAAV;AACH,KA7BI;;AAiCL;;AAEA;;AAEAC,SArCK,mBAqCI,CAER,CAvCI;;;AAyCLC,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA,YAAI,KAAKd,iBAAL,KAA2B,KAAKJ,UAApC,EAAgD;AAC5C;AACA,iBAAKY,QAAL;AACA;AACH;;AAED;AACA,YAAIO,eAAe,IAAI,KAAKlB,IAAL,CAAUmB,KAAV,GAAgB,KAAKnB,IAAL,CAAUoB,YAAjD;AACA,YAAIC,aAAa,EAAjB;AACA,aAAKZ,IAAL,CAAUa,OAAV,GAAoBD,aAAaE,KAAKC,KAAL,CAAWN,gBAAgB,MAAMG,UAAtB,CAAX,CAAjC;AACH;AArDI,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // When the distance between the star and main character is less than this value, collection of the point will be completed\r\n        pickRadius: 0,\r\n        // The game object\r\n        game: {\r\n            default: null,\r\n            serializable: false\r\n        }\r\n    },\r\n\r\n\r\n    getPlayerDistance: function () {\r\n        // judge the distance according to the position of the player node\r\n        var playerPos = this.game.player.getPosition();\r\n        // calculate the distance between two nodes according to their positions\r\n        var dist = cc.pDistance(this.node.position, playerPos);\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\r\n        this.game.spawnNewStar();\r\n        // invoke the scoring method of the Game script\r\n        this.game.gainScore();\r\n        // then destroy the current star's node\r\n        this.node.destroy();\r\n    },\r\n\r\n\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        // judge if the distance between the star and main character is shorter than the collecting distance for each frame\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // invoke collecting behavior\r\n            this.onPicked();\r\n            return;\r\n        }\r\n\r\n        // update the transparency of the star according to the timer in the Game script\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    },\r\n});\r\n"]}