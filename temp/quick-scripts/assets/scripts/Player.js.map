{"version":3,"sources":["Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","url","AudioClip","setJumpAction","jumpUp","moveBy","p","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","setInputControl","self","systemEvent","on","SystemEvent","EventType","KEY_DOWN","event","keyCode","KEY","a","accLeft","d","accRight","KEY_UP","onLoad","jumpAction","node","runAction","xSpeed","start","update","dt","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // main character's jump height\r\n        jumpHeight: 0,\r\n        // main character's jump duration\r\n        jumpDuration: 0,\r\n        // maximal movement speed\r\n        maxMoveSpeed: 0,\r\n        // acceleration\r\n        accel: 0,\r\n        // jumping sound effect resource\r\n        jumpAudio: {\r\n            default: null,\r\n            url: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    setJumpAction: function () {\r\n        // jump up\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        // jump down\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        // add a callback function to invoke other defined methods after the action is finished\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        // repeat unceasingly, and invoke callback to play sound after landing each time\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n\r\n    playJumpSound: function () {\r\n        // invoke sound engine to play the sound\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    setInputControl: function () {\r\n        var self = this;\r\n        // add keyboard event listener\r\n        // When there is a key being pressed down, judge if it's the designated directional button and set up acceleration in the corresponding direction\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, function (event){\r\n            switch(event.keyCode) {\r\n                case cc.KEY.a:\r\n                    self.accLeft = true;\r\n                    break;\r\n                case cc.KEY.d:\r\n                    self.accRight = true;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        // when releasing the button, stop acceleration in this direction\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function (event){\r\n            switch(event.keyCode) {\r\n                case cc.KEY.a:\r\n                    self.accLeft = false;\r\n                    break;\r\n                case cc.KEY.d:\r\n                    self.accRight = false;\r\n                    break;\r\n            }\r\n        });        \r\n    },\r\n\r\n\r\n    onLoad: function () {\r\n        // initialize jump action\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n        // switch of acceleration direction\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // current horizontal speed of main character\r\n        this.xSpeed = 0;\r\n\r\n        // initialize keyboard input listener\r\n        this.setInputControl();\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        // update speed of each frame according to the current acceleration direction\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // restrict the movement speed of the main character to the maximum movement speed\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reaches its limit, use the max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // update the position of the main character according to the current speed\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n    \r\n});\r\n"]}